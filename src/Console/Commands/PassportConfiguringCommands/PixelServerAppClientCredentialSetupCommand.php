<?php

namespace PixelApp\Console\Commands\PassportConfiguringCommands;

use Exception;
use Illuminate\Console\Command;
use PixelApp\CustomLibs\PixelCycleManagers\PixelAppsConnectionManagement\PixelAppClients\PixelAdminPanelAppClient;
use PixelApp\CustomLibs\PixelCycleManagers\PixelAppsConnectionManagement\PixelAppClients\PixelTenantAppCentralDomainClient;
use PixelApp\CustomLibs\PixelCycleManagers\PixelPassportManager\PixelPassportManager;
use PixelApp\CustomLibs\Tenancy\PixelTenancyManager;


class PixelServerAppClientCredentialSetupCommand extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'pixel-passport:setup-server-app-client 
                            {--clientId= The client id value generated by the server app during its passport installation process}
                            {--clientSecret=The client secret value generated by the server app during its passport installation process}';

    /**
     * The console command description.
     * @todo later
     * @var string
     */
    protected $description = 'Setup Admin panel or tenant app client credentials to protecet the connections by passport .... Make sure to get these credentials from the other app (wanted to connect) during the passport configuring !';
 
    /**
     * Execute the console command.
     *
     * @return int
     */
    public function handle()
    {
        $configKey = $this->getSercerAppClientCredentialsPassportConfigKey();
        $configArray = $this->composeCredentialConfigArray();
    
        PixelPassportManager::writeToConfig($configKey , $configArray);
    }

    protected function composeCredentialConfigArray() : array
    {
        $clientId = $this->option('clientId');
        $clientSecret = $this->option('clientSecret');

        if(!$clientId || !$clientSecret)
        {
            throw new Exception("ClientId , ClientSecret arguments are required ... Please try again and dill them !");
        }

        return [
            PixelPassportManager::getClientIdKeyName() => $clientId,
            PixelPassportManager::getClientSecretKeyName() =>  $clientSecret
        ];
    }

    protected function getTenantAppClientCredentialsPassportConfigKey() : string
    {
        return PixelTenantAppCentralDomainClient::getServerAppClientCredentialsPassportKeyName();
    }
    
    protected function getAdminPanelAppClientCredentialsPassportConfigKey() : string
    {
        return PixelAdminPanelAppClient::getServerAppClientCredentialsPassportKeyName();
    }

    protected function getSercerAppClientCredentialsPassportConfigKey() : string
    {
        if(PixelTenancyManager::isItAdminPanelApp()) //the current app is admin panel => need to connect tenant central app
        {
            return $this->getTenantAppClientCredentialsPassportConfigKey();

        }elseif(PixelTenancyManager::isItTenantApp()) //the current app is tenant app => need to connect admin panel app
        {
            return $this->getAdminPanelAppClientCredentialsPassportConfigKey();
        }

        throw new Exception("Only Admin panel , tenant apps support to connect each other by client credential grant !");
    }
    
}

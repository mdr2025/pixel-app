<?php

namespace PixelApp\Services\AuthenticationServices\UserAuthServices\TokenRefreshingService;
 
use Exception;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Response;
use Laravel\Passport\Passport;
use Laravel\Passport\RefreshToken;
use Laravel\Passport\Token;
use Lcobucci\JWT\Parser as JwtParser;
use PixelApp\Http\Requests\AuthenticationRequests\UserAuthenticationRequests\TokenRefreshingRequest;
use PixelApp\Http\Requests\PixelHttpRequestManager;
use PixelApp\Models\UsersModule\PixelUser;
use PixelApp\Services\Traits\GeneralValidationMethods;
use PixelApp\Services\UserEncapsulatedFunc\UserTokensHandlers\UserTokensGenerator;
use PixelApp\Services\UserEncapsulatedFunc\UserTokensHandlers\UserTokensRevoker;

class TokenRefreshingService
{
    use GeneralValidationMethods;

    protected PixelUser $user ;
    protected Token $oldAccessToken ;

    protected function getRequestFormClass(): string
    {
        return PixelHttpRequestManager::getRequestForRequestBaseType(TokenRefreshingRequest::class);
    }

    /**
     * @throws Exception
     */
    protected function initTokensGenerator() : UserTokensGenerator
    {
        return new UserTokensGenerator(  $this->user );
    }

    /**
     * @throws Exception
     */
    protected function generateUserNewTokens() : array
    {
        return $this->initTokensGenerator()->generateTokens();
    }

    /**
     * @throws Exception
     */
    protected function checkUser()  :void
    {
        if(!$this->user = $this->oldAccessToken->user)
        {
            /**
             * If user is null ... the access token maybe generated by client without using HasApiToken 's createToken method
             */
            throw new Exception("There is no user related to this refresh token !");
        }
    }

    protected function fetchRefreshToken() : RefreshToken | null
    {
        /** These scopes are only found on our custom PassportRefreshToken model */
        return Passport::refreshToken()
                        ->where("access_token_id" , $this->oldAccessToken->id) // matching access token id with refresh token's foreign key
                        ->WhereRefreshTokenId( $this->data["refresh_token"] ) // matching the refresh token passed by request with refresh token database row
                        ->active()->notExpired()
                        ->first();
    }

    /**
     * @return $this
     * @throws Exception
     */
    protected function checkOldRefreshToken()  :self
    {
        if($this->fetchRefreshToken())
        {
            return $this;
        }
        throw new Exception("Invalid refresh token was used to refresh an access token !");
    }

    protected function initUserTokensRevoker() : UserTokensRevoker
    {
        return new UserTokensRevoker();
    }

    protected function revokeOldTokens() : void
    {
        $this->initUserTokensRevoker()->addToRevoke( $this->oldAccessToken )->revoke();
    }

    /**
     * @throws Exception
     */
    protected function getAuthorizationBearerAccessToken()  :string
    {
        $oldAccessToken = request()->bearerToken();
        if(! $oldAccessToken)
        {
            throw new Exception("The old access token is not sent with request Authorization bearer header !");
        }
        return $oldAccessToken;
    }

    /**
     * @return string
     * @throws Exception
     */
    protected function getOldAccessTokenId() : string
    {
        $HashedAccessTokenToken = $this->getAuthorizationBearerAccessToken();
        $tokenId =  app(JwtParser::class)->parse($HashedAccessTokenToken)->claims()->get('jti');
        if(!$tokenId)
        {
            throw new Exception("The old access token is unable to parse ");
        }
        return $tokenId;
    }

    /**
     * @return Token|null
     * @throws Exception
     */
    protected function fetchOldAccessTokenInDB()  : Token | null
    {
        return Passport::token()->where("revoked" , 0)->where("id" , $this->getOldAccessTokenId() )->first();
    }

    /**
     * @return $this
     * @throws Exception
     */
    protected function checkOldAccessToken() : self
    {
        $OldAccessTokenModel = $this->fetchOldAccessTokenInDB();
        if($OldAccessTokenModel )
        {
            $this->oldAccessToken = $OldAccessTokenModel;
            return $this;
        }
        throw new Exception("The old access token is invalid ... Can Not refresh it ");
    }

    public function refreshToken() : JsonResponse
    {
        try {
            $this->initValidator()->validateRequest()->setRequestData();
            DB::beginTransaction();
            $this->checkOldAccessToken()->checkOldRefreshToken()->checkUser();

            $this->revokeOldTokens();
            $newTokens = $this->generateUserNewTokens();

            DB::commit();

            return Response::success( $newTokens );

        } catch (Exception $e)
        {
            DB::rollBack();
            return Response::error($e->getMessage());
        }
    }

}
